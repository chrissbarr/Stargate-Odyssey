<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ori_satellite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_entity_par</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

team = 1;
shield = 200;
shield_max = 200;
shield_regen = 1;
hp = 5;

turnspeed_default = 5;
turnspeed = turnspeed_default;

fireX = 50;
fireY = 32;

firing_range = 700;
reload_time = 5.0;
reload_remaining = 0;

firing_time_per_burst = 0.05;
firing_shots_per_burst = 10;
firing_shots_this_burst = 0;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, obj_satellite_destroyed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var target = ai_get_nearest_enemy();

var GunLength = point_distance(sprite_get_xoffset(sprite_index),sprite_get_yoffset(sprite_index),fireX,fireY);
var GunDirection = point_direction(sprite_get_xoffset(sprite_index),sprite_get_yoffset(sprite_index),fireX,fireY);
var firingX = x + lengthdir_x(GunLength,image_angle + GunDirection);
var firingY = y + lengthdir_y(GunLength,image_angle + GunDirection);

if (target != noone and instance_exists(target))
{
    var target_distance = point_distance(firingX, firingY, target.x, target.y);
        
    var proj_speed = 21;
    var target_x_projected = target.x + target.hspeed * (target_distance / proj_speed);
    var target_y_projected = target.y + target.vspeed * (target_distance / proj_speed);
    
    var target_direction = point_direction(firingX, firingY, target_x_projected, target_y_projected);

    var angle_diff = angle_difference(direction, target_direction);
    
    direction -= min(abs(angle_diff), turnspeed) * sign(angle_diff);
    
    //if (collision_line(firingX, firingY, firingX + cos(degtorad(direction)) * firing_range, firingY - sin(degtorad(direction)) * firing_range, target, false, false) != noone)
    if (abs(angle_diff) &lt; 10 &amp;&amp; target_distance &lt; firing_range)
    {
        if (reload_remaining &lt;= 0)
        {
            var bullet = instance_create(firingX, firingY, obj_ori_sattelite_beam);
            bullet.direction = direction;
            bullet.team = team;
            
            if (firing_shots_this_burst == 0) 
            {
                audio_play_sound(snd_ori_sattelite, 0, false);
            }
            
            firing_shots_this_burst += 1;
            
            if (firing_shots_this_burst &gt;= firing_shots_per_burst)
            {
                reload_remaining = reload_time;
                firing_shots_this_burst = 0;
            }
            else
            {
                reload_remaining = firing_time_per_burst;
            }
        }
    }
}

if (reload_remaining &gt; 0)
{
    reload_remaining -= M_DELTA;
}

image_angle = direction;

if (hp &lt; 0)
{
    instance_destroy();
}

if (shield &lt; 1)
{
    image_index = 1;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (M_DEBUG)
{
    var GunLength = point_distance(sprite_get_xoffset(sprite_index),sprite_get_yoffset(sprite_index),fireX,fireY);
    var GunDirection = point_direction(sprite_get_xoffset(sprite_index),sprite_get_yoffset(sprite_index),fireX,fireY);
    var firingX = x + lengthdir_x(GunLength,image_angle + GunDirection);
    var firingY = y + lengthdir_y(GunLength,image_angle + GunDirection);
    
    draw_set_color(c_red);
    draw_line(firingX, firingY, firingX + cos(degtorad(direction)) * firing_range, firingY - sin(degtorad(direction)) * firing_range);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
