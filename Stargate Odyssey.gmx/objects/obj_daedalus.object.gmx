<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_daedalus</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_entity_par</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

team = 0;

image_speed = 0;
mr = room_speed * 1 / 2;

// movement
max_speed_impulse = 6;
max_speed_hyper = 100;
max_speed_reverse = 5;
turn_rate = 2;
friction = 0.1;
acceleration = 0.4;
deceleration = 0.2;

// stats
shield = 100;
shield_max = 100;
shield_regen = 0.0;

hp = 100;
hp_max = 100;
hp_regen = 0;

energy = 100;
energy_max = 100;
energy_regen = 1;

// weapons
railgun_range = 200;
railgun_auto = true;
railgun_level = 1;
railgun_reload_min = 0.06;
railgun_reload_max = 0.16;
railgun_reload_remaining = 0;

railgun_coords_x = ds_list_create();
railgun_coords_y = ds_list_create();

// gun1
ds_list_add(railgun_coords_x, 112);
ds_list_add(railgun_coords_y, 130);

// gun2
ds_list_add(railgun_coords_x, 112);
ds_list_add(railgun_coords_y, 115);

// gun3
ds_list_add(railgun_coords_x, 68);
ds_list_add(railgun_coords_y, 111);

// gun4
ds_list_add(railgun_coords_x, 68);
ds_list_add(railgun_coords_y, 134);

missile_range = 300;
missile_auto = false;
missile_reload_min = 0.5;
missile_reload_max = 0.5;
missile_reload_remaining = 0;

missile_coords_x = ds_list_create();
missile_coords_y = ds_list_create();

// missile1
ds_list_add(missile_coords_x, 115);
ds_list_add(missile_coords_y, 125);

// missile1
ds_list_add(missile_coords_x, 115);
ds_list_add(missile_coords_y, 121);

engine_snd = audio_play_sound(snd_daedalus_engine, 1, true);

if room_caption="Mission 4"
upgrade=true
else
upgrade=false

if upgrade=true{
shield=1000
alarm[2]=10}
else
shield=100
d=0

engine = "Offline";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, obj_daedalus_destroyed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// --- Handle Motion ---

var max_speed = max_speed_impulse;
engine = "Offline";

if (keyboard_check(vk_up) || keyboard_check(ord('W')))
{
    if (keyboard_check(vk_shift) &amp;&amp; energy &gt; 10)
    {
        engine = "HyperDrive";
        max_speed = max_speed_hyper;
        energy -= 0.20;
    }
    else
    {
        engine = "Impulse";
        max_speed = max_speed_impulse;
    }
    
    speed += acceleration;
}

if (keyboard_check(vk_down) || keyboard_check(ord('S')))
{
    engine = "Impulse";
    speed -= deceleration;
}

if (keyboard_check(vk_left) || keyboard_check(ord('A')))
{
    direction += turn_rate;
}

if (keyboard_check(vk_right) || keyboard_check(ord('D')))
{
    direction -= turn_rate;
}

speed = clamp(speed, -max_speed_reverse, max_speed);
image_angle = direction;

// engine sound
volume = clamp(speed, 0, 30);
audio_sound_gain(engine_snd, volume*.05, 0);

// keep player within game room
var boundaryWidth = 400;
var centerX = room_width / 2;
var centerY = room_height / 2;

if (y &lt; boundaryWidth
        || y &gt; room_height - boundaryWidth
        || x &lt; boundaryWidth
        || x &gt; room_width - boundaryWidth) 
{
    motion_add(point_direction(x, y, centerX, centerY), 1);
}

// --- Handle Health ---
if (shield &gt; 0)
{
    image_index = 0;
}
else
{
    image_index = 1;
}

if (hp &lt;= 0)
{
    instance_destroy();
}

// --- Handle Weapons ---

// railguns
if (railgun_reload_remaining &lt;= 0) 
{
    var target = ai_get_nearest_enemy();
    if (target != noone &amp;&amp; instance_exists(target))
    {
        if (distance_to_object(target) &lt; railgun_range)
        {
            if (railgun_level == 2)
            {
                railgun_count = 4;
            } 
            else
            {
                railgun_count = 2;
            }
            
            if (railgun_auto or (!railgun_auto &amp;&amp; keyboard_check(vk_space)))
            {
                for (i = 0; i &lt; railgun_count; i++)
                {
                    var aimX, aimY;
                    if (!railgun_auto &amp;&amp; keyboard_check(vk_space))
                    {
                        aimX = mouse_x;
                        aimY = mouse_y;
                    }
                    else
                    {
                        aimX = target.x;
                        aimY = target.y;
                    }
                    
                    var gunLength = point_distance(sprite_get_xoffset(sprite_index), sprite_get_yoffset(sprite_index), railgun_coords_x[| i], railgun_coords_y[| i]);
                    var gunDir = point_direction(sprite_get_xoffset(sprite_index), sprite_get_yoffset(sprite_index), railgun_coords_x[| i], railgun_coords_y[| i]);
                    var gunX = x + lengthdir_x(gunLength, image_angle + gunDir);
                    var gunY = y + lengthdir_y(gunLength, image_angle + gunDir);
                    var bullet = instance_create(gunX, gunY, obj_rail_gun_round);
                    bullet.direction = point_direction(bullet.x, bullet.y, aimX, aimY);
                    bullet.team = team;
                }
                
                railgun_reload_remaining = random_range(railgun_reload_min, railgun_reload_max);
            }
        }
    }
}
else
{
    railgun_reload_remaining -= M_DELTA;
}

// missiles
if (missile_reload_remaining &lt;= 0) 
{
    var target = ai_get_nearest_enemy();
    if (target != noone &amp;&amp; instance_exists(target))
    {
        if (distance_to_object(target) &lt; missile_range)
        {            
            if (missile_auto or (!missile_auto &amp;&amp; keyboard_check(vk_space)))
            {
                for (i = 0; i &lt; ds_list_size(missile_coords_x); i++)
                {                   
                    var gunLength = point_distance(sprite_get_xoffset(sprite_index), sprite_get_yoffset(sprite_index), missile_coords_x[| i], missile_coords_y[| i]);
                    var gunDir = point_direction(sprite_get_xoffset(sprite_index), sprite_get_yoffset(sprite_index), missile_coords_x[| i], missile_coords_y[| i]);
                    var gunX = x + lengthdir_x(gunLength, image_angle + gunDir);
                    var gunY = y + lengthdir_y(gunLength, image_angle + gunDir);
                    var missile = instance_create(gunX, gunY, obj_missile);
                    missile.team = team;
                    missile.target = target;
                }
                audio_play_sound(snd_missile, 0, false)
                missile_reload_remaining = random_range(missile_reload_min, missile_reload_max);
            }
        }
    }
}
else
{
    missile_reload_remaining -= M_DELTA;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hatak">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>motion_add(point_direction(other.x, other.y, x, y), 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
